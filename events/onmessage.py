import logging
import traceback
from io import BytesIO
from aiogram import types
from aiogram.dispatcher import FSMContext
from states import UserAddStates, ProductAddStates, StickerCreateStates

from keyboardx import *
from loader import dp
from loader import userhandler as uh
from loader import bargenerator as bargen
from loader import stickerlabelgenerator as stickerlabel

@dp.message_handler(commands="start")
async def on_start(message: types.Message):
    uid = message.from_user.id
    uh.create_user(uid)

    await message.answer((
        "üëã –ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –∂–∏–∑–Ω—å —Å –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ WB\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞, –∑–∞–ø–æ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–º –±—Ä–µ–Ω–¥–µüëá"
    ), reply_markup=fill_brand_info_btn) 

@dp.callback_query_handler(text="ProductsADD")
async def add_brand(callback : types.CallbackQuery):
    await callback.message.answer((
        "–î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–µ–Ω–¥–µ! :)\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    ))
    await UserAddStates.waiting_for_brand_name.set()

@dp.message_handler(state=UserAddStates.waiting_for_brand_name)
async def brand_setted(message: types.Message, state: FSMContext):
    await state.update_data(brand=message.text)
    brand_data = await state.get_data()
    if "seller" in brand_data:
        await message.answer((
            f"‚Ä¢ –ë—Ä–µ–Ω–¥: <b>{brand_data['brand']}</b>\n"
            f"‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{brand_data['seller']}</b>\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        ), reply_markup=fill_brand_done)
        await UserAddStates.waiting_for_confirm.set()
    else:
        await message.answer((
            f"‚Ä¢ –ë—Ä–µ–Ω–¥: <b>{message.text}</b>\n"
            "‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: ?\n"
            "–í–≤–µ–¥–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:"
        ))
        await UserAddStates.next()

@dp.message_handler(state=UserAddStates.waiting_for_seller_name)
async def brand_setted(message: types.Message, state: FSMContext):
    await state.update_data(seller=message.text)
    brand_data = await state.get_data()
    await message.answer((
        f"‚Ä¢ –ë—Ä–µ–Ω–¥: <b>{brand_data['brand']}</b>\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{brand_data['seller']}</b>\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    ), reply_markup=fill_brand_done)
    await UserAddStates.next()

@dp.callback_query_handler(state=UserAddStates.waiting_for_confirm, text="ChangeBrand")
async def setting_done(callback : types.CallbackQuery):
    await UserAddStates.waiting_for_brand_name.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞:")

@dp.callback_query_handler(state=UserAddStates.waiting_for_confirm, text="ChangeSeller")
async def setting_done(callback : types.CallbackQuery):
    await UserAddStates.waiting_for_seller_name.set()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞:")
    
@dp.message_handler(state="*", text="‚è™–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
async def wb_home(message : types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        if "ProductAddStates" in current_state:
            product = await state.get_data()
            try:
                uh.product_del(message.from_user.id, product["articul"])
            except: pass
        await state.finish()
    await message.answer((
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"
    ), reply_markup = home_keyboard)
    
@dp.callback_query_handler(state=UserAddStates.waiting_for_confirm, text="ChangeDone")
async def setting_done(callback : types.CallbackQuery, state: FSMContext):
    brand_data = await state.get_data()
    uid = callback.from_user.id
    await callback.message.answer((
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ. –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—ã–µ..‚è≤Ô∏è\n"
        "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –≤–∞—à–µ–≥–æ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω–∞!"
    ), reply_markup = home_keyboard)

    uh.add_dict(uid, brand_data)
    await state.finish()

@dp.message_handler(text = "‚û°Ô∏è–°–æ–∑–¥–∞—Ç—å –Ω–∞–∫–ª–µ–π–∫–∏")
async def wb_createSticker(message : types.Message):
    uid = message.from_user.id
    wb_products = uh.get_products(uid)
    if len(wb_products) == 0:
        await message.answer((
        "‚õî–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n"
        "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏"))
    else:
        await message.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ ...", reply_markup=menu_keyboard)
        prods = []
        for i in wb_products:
            prods.append(types.InlineKeyboardButton(text=f"({i}){uh.get_product(uid, i)['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}", callback_data=f"WBSticker_create:{i}"))
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(*prods)
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä(–∞—Ä—Ç–∏–∫—É–ª), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫—É:", reply_markup=keyboard)
        await StickerCreateStates.waiting_for_product.set()

@dp.callback_query_handler(state=StickerCreateStates.waiting_for_product)
async def wb_sticker_product(callback: types.CallbackQuery, state: FSMContext):
    product = callback.data.replace("WBSticker_create:","")
    product_name = uh.get_product(callback.from_user.id, product)['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
    await state.update_data(articul = product)
    await state.update_data(name = product_name)
    await StickerCreateStates.next()
    
    await callback.message.answer((
        f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: <b>{product_name}</b>\n"
        "–ù—É–∂–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–±–µ–∑ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤)?"
    ), reply_markup=yes_no_kb)

@dp.message_handler(text=["‚úÖ–î–∞", "üö´–ù–µ—Ç"], state=StickerCreateStates.waiting_for_confirm)
async def wb_sticker_additional(message: types.Message, state: FSMContext):
    product_name = await state.get_data()
    await state.update_data(double=(True if message.text == "‚úÖ–î–∞" else False))
    await state.update_data(photos=[])
    await StickerCreateStates.next()

    await message.answer((
        f"–í—ã–±—Ä–∞–Ω —Ç–æ–≤–∞—Ä: <b>{product_name['name']}</b>\n"
        f"–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏—Ä–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞: <b>{message.text}</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Å–∫–∞—á–∞–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏:\n"
        "<u>–í–∞–∂–Ω–æ!</u> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ <u><b>50—Ö40</b></u>. –†–∞–∑–º–µ—Ä—ã –º–µ–Ω—å—à–µ –ø–æ–ª—É—á–∞—Ç—Å—è –º–µ–ª–∫–æ–≤–∞—Ç—ã–º–∏\n"
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"
    ), reply_markup=stickers_confirm_kb)
    
@dp.message_handler(content_types=['photo'], state=StickerCreateStates.waiting_for_screens)
async def wb_sticker_screens(message : types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photos"] = [*data["photos"], message.photo[-1]]

@dp.message_handler(text="‚è≠Ô∏è–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", state=StickerCreateStates.waiting_for_screens)
async def wb_sticker_done(message : types.Message, state: FSMContext):
    product = await state.get_data()
    if len(product["photos"]) > 0:
        uid = message.from_user.id
        await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

        for photo in product["photos"]:
            byte_photo = BytesIO()
            await photo.download(
                destination_file = byte_photo
            )
            stickerlabel.sticker_add(uid, byte_photo, product['double'])
        try:
            docx = types.InputFile(stickerlabel.complete_file(uid, product["articul"]))
            await message.answer(
                f"üéâ–ì–æ—Ç–æ–≤–æ! –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ <u>{len(product['photos'])}</u> —ç—Ç–∏–∫–µ—Ç–æ–∫(-–∞)"
            )
            await state.finish()
            await message.answer_document(docx, reply_markup=stickers_confirm_done)
            stickerlabel.clear()
        except Exception as e:
            await state.update_data(counter=0)
            await state.update_data(photos=[])
            await message.answer((
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫!\n"
                f"–û—à–∏–±–∫–∞: <b>{e}</b>"
            ))
            logging.critical(traceback.format_exc())
    else:
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã!")

@dp.message_handler(text = "‚ÑπÔ∏è–ú–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def wb_info(message : types.Message):
    wb_userinfo_brand = uh.get(message.from_user.id, "brand")
    wb_userinfo_seller = uh.get(message.from_user.id, "seller")
    wb_userinfo_products = len(uh.get_products(message.from_user.id))

    await message.answer((
        "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"‚Ä¢ –ë—Ä–µ–Ω–¥: <b>{wb_userinfo_brand}</b>\n"
        f"‚Ä¢ –ü—Ä–æ–¥–∞–≤–µ—Ü: <b>{wb_userinfo_seller}</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {wb_userinfo_products}"
    ))

@dp.message_handler(text = "‚úèÔ∏è–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def wb_addProduct(message : types.Message):
    await ProductAddStates.waiting_product_name.set()
    await message.answer((
        "‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!üöß\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    ), reply_markup=menu_keyboard)
    
@dp.message_handler(state=ProductAddStates.waiting_product_name)
async def wb_product_name(message : types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await ProductAddStates.next()
    await message.answer((
        f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {message.text}\n"
        "–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥:\n"
        """(–¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π):
        ‚Ä¢ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–ª–∏ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã: / * - + @ ‚Ññ % & $ ! = ( ) { } [ ]"""
    ))

@dp.message_handler(state=ProductAddStates.waiting_product_barcode)
async def wb_product_barcode(message : types.Message, state: FSMContext):
    if len(message.text.strip()) >= 20:
        await message.answer("–ë–∞—Ä–∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤!")
    else:
        try:
            barcode_ready = bargen.create(message.from_user.id, message.text.strip())
            
            await state.update_data(barcode=message.text.strip())
            await state.update_data(barcode_ready=barcode_ready)
            
            brand_data = await state.get_data()
            
            await ProductAddStates.next()
            await message.answer((
                f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {brand_data['name']}\n"
                f"–®—Ç—Ä–∏—Ö–∫–æ–¥: {brand_data['barcode']}\n"
                "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª:"
            ))
        except Exception as e:
            await message.answer((
                f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥!\n"
                f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: <b>{e}</b>"
            ))

@dp.message_handler(state=ProductAddStates.waiting_product_articul)
async def wb_product_articul(message : types.Message, state: FSMContext):
    forbidden_symbols = ["\\", '.']
    articul = message.text
    if any(c in forbidden_symbols for c in articul):
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä—Ç–∏–∫—É–ª")
    else:
        await state.update_data(articul=message.text)
        brand_data = await state.get_data()
        await ProductAddStates.next()
        uh.product_set(message.from_user.id, brand_data["articul"], {
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": brand_data["name"],
                "–®—Ç—Ä–∏—Ö–∫–æ–¥":     brand_data['barcode'],
                "–ê—Ä—Ç–∏–∫—É–ª":      brand_data['articul']
            }
        )
        await message.answer((
            f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {brand_data['name']}\n"
            f"–®—Ç—Ä–∏—Ö–∫–æ–¥: {brand_data['barcode']}\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {brand_data['articul']}\n\n"
            
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞\n"
            "(—Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –µ—â–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–µ —Ç–æ–≤–∞—Ä–∞)\n"
            "–í–∞–∂–Ω–æ! –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ: <u>–¶–≤–µ—Ç: –ß–µ—Ä–Ω—ã–π</u>\n"
            "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤–∞—à–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º:\n"
            "   ‚Äî –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –∞—Ä—Ç–∏–∫—É–ª –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:\n"
            "   ‚Äî —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–ª–∏ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã: / * - + @ ‚Ññ % & $ ! = ( ) { } [ ]\n\n"
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å':)"
        ), reply_markup=product_add_done)

@dp.message_handler(regexp="^[^:]*:[^:]*$", state=ProductAddStates.waiting_product_additional)
async def wb_product_additional(message: types.Message, state: FSMContext):
    brand_data = await state.get_data()
    uid = message.from_user.id
    if message.text.count("\n") > 1:
        await message.answer("–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –æ–¥–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –∑–∞ —Ä–∞–∑!")
    else:
        product_key, product_value = message.text.split(":")
        uh.product_add(uid, brand_data["articul"], product_key.strip(), product_value.strip())
        product_params = uh.get_product(uid, brand_data["articul"])
        product_value = f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {brand_data['name']}\n–®—Ç—Ä–∏—Ö–∫–æ–¥: {brand_data['barcode']}\n–ê—Ä—Ç–∏–∫—É–ª: {brand_data['articul']}\n"
        for k,v in product_params.items():
            if k not in ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–ê—Ä—Ç–∏–∫—É–ª"]:
                product_value += f"{k}: {v}\n"
        product_value += "\n–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"
        await message.answer(product_value)

@dp.message_handler(text="‚úÖ–ó–∞–≤–µ—Ä—à–∏—Ç—å", state=ProductAddStates.waiting_product_additional)
async def wb_product_done(message: types.Message, state: FSMContext):
    uid = message.from_user.id
    brand_data = await state.get_data()
    product_params = uh.get_product(uid, brand_data["articul"])

    label = stickerlabel.label_create(uid, product_params, brand_data["barcode_ready"])
    await message.answer("‚úÖ–ü—Ä–æ–¥—É–∫—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    label_photo = types.InputFile(label)
    await message.answer_photo(
        label_photo, 
        caption="–°–æ–∑–¥–∞–Ω–Ω–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞. –û–Ω–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫",
        reply_markup = home_keyboard
    )
    await state.finish()
    uh.save(uid)